<launch>

  <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <arg name="use_gui" default="true" />
  <arg name="use_rviz" default="true" />

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find pkg_moveit_ur5_1)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>

  <!-- If needed, broadcast static tf for robot root -->
  

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="$(arg use_gui)"/>
    <rosparam param="/source_list">[/joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt! executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find pkg_moveit_ur5_1)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"/>
  </include>

    <!--   ebot -->
    <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find ebot_description)/urdf/ebot_ur5.xacro'"/>

    <!--   ur5 world -->
    <include file="$(find ebot_gazebo)/launch/packaging_assist.launch" />

    <arg name="x" default="0"/>
    <arg name="y" default="0"/>
    <arg name="z" default="0"/>
    <arg name="r" default="0"/>
    <arg name="p" default="0"/>
    <arg name="ya" default="0"/>		

    <!-- Spawn the ur5 robot model -->
    <node name="mybot_spawn" pkg="gazebo_ros" type="spawn_model" output="screen" 
        args="-urdf -param robot_description -model ebot -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg r) -P $(arg p) -Y $(arg ya)" />

    <!-- including launch file for localization using AMCL -->
    <include file="$(find ebot_nav)/launch/amcl.launch" />

    <arg name="map_file" default="$(find ebot_nav)/maps/task2_world.yaml"/>
    <node pkg="map_server" type="map_server" name="map_server" args="$(arg map_file)"/>

    <!-- Move base -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find ebot_nav)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find ebot_nav)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find ebot_nav)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find ebot_nav)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find ebot_nav)/config/trajectory_planner.yaml" command="load" />


    <param name="move_base/DWAPlannerROS/yaw_goal_tolerance" value="1.0"/>
    <param name="move_base/DWAPlannerROS/xy_goal_tolerance" value="1.0"/>

    </node>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find pkg_moveit_ur5_1)/launch/moveit_rviz.launch" if="$(arg use_rviz)">
    <arg name="rviz_config" value="$(find pkg_moveit_ur5_1)/launch/moveit.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

</launch>
